package generated_bb_go_1m

import (
    "github.com/stretchr/testify/suite"
    "github.com/valyala/fastjson"
    "io"
    "net/http"
    "strings"
    "testing"
)

// These vars are added so Go compiler doesn't complain if imports aren't used
var _ *fastjson.Object = nil
var _ *io.Reader = nil
var _ *strings.Reader = nil




/**
 * This file was automatically generated by EvoMaster on 2024-04-24T14:49:24.504-03:00[America/Argentina/Buenos_Aires]
 * 
 * The generated test suite contains 7 tests
 * 
 * Covered targets: 15
 * 
 * Used time: 0h 1m 58s
 * 
 * Needed budget for current results: 72%
 * 
 * This file contains test cases that represent successful calls.
 */
type EvoMasterSuccessesTest struct {
    suite.Suite
    BaseUrlOfSut string
}

func TestEvoMasterSuccessesSuite(t *testing.T) {
    suite.Run(t, new(EvoMasterSuccessesTest))
}


func (suite *EvoMasterSuccessesTest) SetupSuite() {
    suite.BaseUrlOfSut = "localhost:5001"
}








func (suite *EvoMasterSuccessesTest) Test_0() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/522/0.31531501628136305"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_1() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/880/678"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_2() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/triangle/379/713/762"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_3() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/fisher/801/519/0.5267259880752357"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_4() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/bessj/445/0.8296912233491993"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_5() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/0.5722295925058892/0.5559666311129164"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
}


func (suite *EvoMasterSuccessesTest) Test_6() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/swagger.json"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
    
    suite.Equal(200, res_0.StatusCode)
}
