package generated_go_7s

import (
    "github.com/stretchr/testify/suite"
    "github.com/valyala/fastjson"
    "io"
    "net/http"
    "strings"
    "testing"
)

// These vars are added so Go compiler doesn't complain if imports aren't used
var _ *fastjson.Object = nil
var _ *io.Reader = nil
var _ *strings.Reader = nil




/**
 * This file was automatically generated by EvoMaster on 2024-04-12T14:53:58.460-03:00[America/Argentina/Buenos_Aires]
 * 
 * The generated test suite contains 4 tests
 * 
 * Covered targets: 8
 * 
 * Used time: 0h 0m 8s
 * 
 * Needed budget for current results: 99%
 * 
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
type EvoMasterOthersTest struct {
    suite.Suite
    Controller *AppController
    BaseUrlOfSut string
}

func TestEvoMasterOthersSuite(t *testing.T) {
    suite.Run(t, new(EvoMasterOthersTest))
}


func (suite *EvoMasterOthersTest) SetupSuite() {
    suite.Controller = &AppController{}
    suite.Controller.SetPort(5012)
    suite.BaseUrlOfSut = suite.Controller.StartSut()
}


func (suite *EvoMasterOthersTest) TearDownSuite() {
    suite.Controller.StopSut()
}


func (suite *EvoMasterOthersTest) SetupTest() {
    suite.Controller.ResetStateOfSUT()
}




func (suite *EvoMasterOthersTest) Test_0() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/fisher/1434/333/5.900458760244751"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    req.Header.Set("x-EMextraHeader123", "")
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
    
    suite.Equal(400, res_0.StatusCode)
    suite.True(strings.HasPrefix(res_0.Header.Get("Content-Type"), "application/json"))
    body_1, err := io.ReadAll(res_0.Body)
    suite.NoError(err, "Request body read error must be nil")
    
    var p fastjson.Parser
    v_body_1, err := p.ParseBytes(body_1)
    suite.NoError(err, "Parser body creation error must be nil")
    suite.Contains(string(v_body_1.GetStringBytes()), "")
}


func (suite *EvoMasterOthersTest) Test_1() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/-130694/0.2696170418906269"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    req.Header.Set("x-EMextraHeader123", "")
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
    
    suite.Equal(400, res_0.StatusCode)
    suite.True(strings.HasPrefix(res_0.Header.Get("Content-Type"), "application/json"))
    body_1, err := io.ReadAll(res_0.Body)
    suite.NoError(err, "Request body read error must be nil")
    
    var p fastjson.Parser
    v_body_1, err := p.ParseBytes(body_1)
    suite.NoError(err, "Parser body creation error must be nil")
    suite.Contains(string(v_body_1.GetStringBytes()), "error: n < 0 or x < 0")
}


func (suite *EvoMasterOthersTest) Test_2() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/bessj/0/-8.988465674311579E307"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    req.Header.Set("x-EMextraHeader123", "")
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
    
    suite.Equal(400, res_0.StatusCode)
    suite.True(strings.HasPrefix(res_0.Header.Get("Content-Type"), "application/json"))
    body_1, err := io.ReadAll(res_0.Body)
    suite.NoError(err, "Request body read error must be nil")
    
    var p fastjson.Parser
    v_body_1, err := p.ParseBytes(body_1)
    suite.NoError(err, "Parser body creation error must be nil")
    suite.Contains(string(v_body_1.GetStringBytes()), "")
}


func (suite *EvoMasterOthersTest) Test_3() {
    
    
    method := http.MethodGet
    reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/-259953/547"
    
    req, err := http.NewRequest(method, reqUrl, nil)
    suite.Nil(err, "Request creation error must be nil")
    
    req.Header.Set("x-EMextraHeader123", "")
    res_0, err := http.DefaultClient.Do(req)
    suite.NoError(err, "Request error must be nil")
    defer res_0.Body.Close()
    
    suite.Equal(400, res_0.StatusCode)
    suite.True(strings.HasPrefix(res_0.Header.Get("Content-Type"), "application/json"))
    body_1, err := io.ReadAll(res_0.Body)
    suite.NoError(err, "Request body read error must be nil")
    
    var p fastjson.Parser
    v_body_1, err := p.ParseBytes(body_1)
    suite.NoError(err, "Parser body creation error must be nil")
    suite.Contains(string(v_body_1.GetStringBytes()), "")
}
