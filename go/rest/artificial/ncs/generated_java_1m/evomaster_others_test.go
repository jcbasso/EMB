package generated_go_1m

import (
	"github.com/stretchr/testify/suite"
	"github.com/valyala/fastjson"
	"io"
	"net/http"
	"strings"
	"testing"
)

// These vars are added so Go compiler doesn't complain if imports aren't used
var _ *fastjson.Object = nil
var _ *io.Reader = nil
var _ *strings.Reader = nil

/**
 * This file was automatically generated by EvoMaster on 2024-03-13T16:28:22.473-03:00[America/Argentina/Buenos_Aires]
 *
 * The generated test suite contains 17 tests
 *
 * Covered targets: 178
 *
 * Used time: 0h 1m 0s
 *
 * Needed budget for current results: 100%
 *
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
type EvoMasterOthersTest struct {
	suite.Suite
	Controller   AppController
	BaseUrlOfSut string
}

func TestEvoMasterOthersSuite(t *testing.T) {
	suite.Run(t, new(EvoMasterOthersTest))
}

func (suite *EvoMasterOthersTest) SetupSuite() {
	suite.Controller = AppController{}
	suite.Controller.SetPort(5012)
	suite.BaseUrlOfSut = suite.Controller.StartSut()
}

func (suite *EvoMasterOthersTest) TearDownSuite() {
	suite.Controller.StopSut()
}

func (suite *EvoMasterOthersTest) SetupTest() {
	suite.Controller.ResetStateOfSUT()
}

func (suite *EvoMasterOthersTest) Test_0() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/fisher/16794/333/0.96776"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_1() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/bessj/-261250/0.8643764331471611"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_2() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/512330544/197"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_3() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/fisher/394/8388941/0.9677559094241207?EMextraParam123=_EM_0_XYZ_"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_4() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/bessj/16777510/-19.190442126833638?EMextraParam123=_EM_54_XYZ_"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_5() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/-32626/-8388063"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_6() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/682/32937"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_7() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/remainder/976/-15583"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_8() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/-1891035101/0.8427323183766395"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "_EM_139_XYZ_")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_9() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/1470330247/-923.9775535784128?EMextraParam123=_EM_79_XYZ_"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_10() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/102016.27259839038/-14976.532573676404"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_11() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/-1.2670732446500659/0.14"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_12() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/0.0/2.115075768328543"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_13() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/0/0.0"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_14() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/expint/1/0.0"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_15() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/8.988465674311579E307/7.919220093303688E307"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterOthersTest) Test_16() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/8.988465674311579E307/8.988465674311579E307"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(400, res_0.StatusCode)
	suite.Equal(http.NoBody, res_0.Body)
}
