package generated_go_10s

import (
	"github.com/stretchr/testify/suite"
	"github.com/valyala/fastjson"
	"io"
	"net/http"
	"strings"
	"testing"
	"time"
)

// These vars are added so Go compiler doesn't complain if imports aren't used
var _ *time.Time = nil
var _ *fastjson.Object = nil
var _ *io.Reader = nil
var _ *strings.Reader = nil
var _ *fastjson.Object = nil

/**
 * This file was automatically generated by EvoMaster on 2024-03-13T11:49:05.600-03:00[America/Argentina/Buenos_Aires]
 *
 * The generated test suite contains 2 tests
 *
 * Covered targets: 8
 *
 * Used time: 0h 0m 10s
 *
 * Needed budget for current results: 100%
 *
 * This file contains test cases that are likely to indicate faults.
 */
type EvoMasterFaultsTest struct {
	suite.Suite
	Controller   *AppController
	BaseUrlOfSut string
}

func TestEvoMasterFaultsSuite(t *testing.T) {
	suite.Run(t, new(EvoMasterFaultsTest))
}

func (suite *EvoMasterFaultsTest) SetupSuite() {
	suite.Controller = &AppController{}
	suite.Controller.SetPort(5012)
	suite.BaseUrlOfSut = suite.Controller.StartSut()
}

func (suite *EvoMasterFaultsTest) TearDownSuite() {
	suite.Controller.StopSut()
}

func (suite *EvoMasterFaultsTest) SetupTest() {
	suite.Controller.ResetStateOfSUT()
}

func (suite *EvoMasterFaultsTest) Test_0_with500() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/fisher/410/333/0.0?EMextraParam123=_EM_0_XYZ_"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(500, res_0.StatusCode) //
	suite.Equal(http.NoBody, res_0.Body)
}

func (suite *EvoMasterFaultsTest) Test_1_with500() {

	method := http.MethodGet
	reqUrl := "http://" + suite.BaseUrlOfSut + "/api/gammq/4.4942328371557893E307/1.931115672215378E306"

	req, err := http.NewRequest(method, reqUrl, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("x-EMextraHeader123", "")
	res_0, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer res_0.Body.Close()

	suite.Equal(500, res_0.StatusCode) //
	suite.Equal(http.NoBody, res_0.Body)
}
